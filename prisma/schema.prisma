// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String         @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  posts                 Post[]
  sessions              Session[]
  followers             Follow[]       @relation("Followers")
  following             Follow[]       @relation("Following")
  likes                 Like[]
  comments              Comment[]
  bookmarks             Bookmark[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  musicalInfo           MusicalInfo?
  UserContact           UserContact?
  sentConnections       Connection[]   @relation("SentConnections")
  receivedConnections   Connection[]   @relation("ReceivedConnections")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Connection {
  id          String           @id @default(cuid())
  requesterId String
  recipientId String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("SentConnections", fields: [requesterId], references: [id])
  recipient User @relation("ReceivedConnections", fields: [recipientId], references: [id])

  @@unique([requesterId, recipientId])
  @@map("connections")
}

enum ConnectionStatus {
  PENDING
  CONNECTED
}

enum SocialLinkPlatform {
  INSTAGRAM
  SPOTIFY
  SOUNDCLOUD
}

model UserContact {
  id          String       @id @default(cuid())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone       String?
  city        String?
  country     String?
  socialLinks SocialLink[]

  @@unique([phone, userId])
  @@map("user_contacts")
}

model SocialLink {
  id            String             @id @default(cuid())
  platform      SocialLinkPlatform
  url           String
  userContactId String
  UserContact   UserContact        @relation(fields: [userContactId], references: [id])

  @@map("social_links")
}

model MusicalInfo {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  yearsOfExperience    String
  title                String
  genres               String?
  instruments          String?
  primaryInstrument    String?
  bio                  String?
  interestedInTutoring Boolean?
  interestedInLearning Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("musical_info")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@map("follow")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  attachments         Media[]
  likes               Like[]
  comments            Comment[]
  bookmarks           Bookmark[]
  linkedNotifications Notification[]

  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

model Instruments {
  id   String @id @default(cuid())
  name String
  category String
}
model Genres {
  id   String @id @default(cuid())
  genre String
  subgenre String
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  ACCEPT_CONNECTION
}
